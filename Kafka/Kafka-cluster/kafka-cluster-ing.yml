apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: kafka-cluster
spec:
  kafka:
    version: 3.4.0
    replicas: 3
    logging:
      type: inline
      loggers:
        kafka.root.logger.level: "DEBUG, ERROR, WARN"
    resources:
      requests:
        memory: 512Mi
        cpu: 100m
      limits:
        memory: 4Gi
        cpu: 4
    jvmOptions:
      -Xms: 256m
      -Xmx: 4096m
    listeners:
      - name: external
        port: 9094
        type: ingress
        tls: true
        authentication:
         type: scram-sha-512
        configuration:
          class: nginx
          brokerCertChainAndKey:
            secretName: kafka-tls
            certificate: tls.crt
            key: tls.key
          bootstrap:
            host: kafka-external.kanomnutt.site
            annotations:
              external-dns.alpha.kubernetes.io/hostname: kafka-external.kanomnutt.site.
              external-dns.alpha.kubernetes.io/ttl: "60"
              nginx.ingress.kubernetes.io/ssl-passthrough: "true"
          brokers:
          - broker: 0
            host: kafka0.kanomnutt.site
            annotations:
              external-dns.alpha.kubernetes.io/hostname: kafka-external.kanomnutt.site.
              external-dns.alpha.kubernetes.io/ttl: "60"
              nginx.ingress.kubernetes.io/ssl-passthrough: "true"
            advertisedHost: kafka0.kanomnutt.site
          - broker: 1
            host: kafka1.kanomnutt.site
            annotations:
              external-dns.alpha.kubernetes.io/hostname: kafka-external.kanomnutt.site.
              external-dns.alpha.kubernetes.io/ttl: "60"
              nginx.ingress.kubernetes.io/ssl-passthrough: "true"
            advertisedHost: kafka1.kanomnutt.site
          - broker: 2
            host: kafka2.kanomnutt.site
            annotations:
              external-dns.alpha.kubernetes.io/hostname: kafka-external.kanomnutt.site.
              external-dns.alpha.kubernetes.io/ttl: "60"
              nginx.ingress.kubernetes.io/ssl-passthrough: "true"
            advertisedHost: kafka2.kanomnutt.site
    authorization:
      type: simple
    config:
      default.replication.factor: 3
      min.insync.replicas: 3
      offsets.topic.replication.factor: 3
      transaction.state.log.replication.factor: 3
      transaction.state.log.min.isr: 2
      log.message.format.version: "3.4"
      inter.broker.protocol.version: "3.4"
    metricsConfig:
      type: jmxPrometheusExporter
      valueFrom:
        configMapKeyRef:
          name: kafka-metrics
          key: kafka-metrics-config.yaml
    storage:
      type: jbod
      volumes:
      - id: 0
        type: persistent-claim
        size: 5Gi
        class: px-db
        deleteClaim: false
      - id: 1
        type: persistent-claim
        size: 5Gi
        class: px-db
        deleteClaim: false
      - id: 2
        type: persistent-claim
        size: 5Gi
        class: px-db
        deleteClaim: false
    template:
      kafkaContainer:
        env:
        - name: TZ
          value: "Asia/Bangkok"
      pod:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    strimzi.io/cluster: kafka-cluster
                    strimzi.io/name: kafka-cluster-kafka
                topologyKey: kubernetes.io/hostname
              weight: 100
  zookeeper:
    logging:
      type: inline
      loggers:
        zookeeper.root.logger: "DEBUG, ERROR, WARN"
    metricsConfig:
      type: jmxPrometheusExporter
      valueFrom:
        configMapKeyRef:
          name: zookeeper-metrics
          key: zookeeper-metrics.yaml
    replicas: 3
    resources:
      requests:
        memory: 100Mi
        cpu: 100m
      limits:
        memory: 2Gi
    jvmOptions:
      -Xms: 512m
      -Xmx: 2048m
    storage:
      type: persistent-claim
      size: 2Gi
      class: px-db
      deleteClaim: false
    template:
      zookeeperContainer:
        env:
        - name: TZ
          value: "Asia/Bangkok"
      pod:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    strimzi.io/cluster: kafka-cluster
                    strimzi.io/name: kafka-cluster-zookeeper
                topologyKey: kubernetes.io/hostname
              weight: 100
  entityOperator:
    tlsSidecar:
      resources:
        requests:
          memory: 100Mi
          cpu: 50m
        limits:
          memory: 128Mi
    topicOperator:
      resources:
        requests:
          memory: 100Mi
          cpu: 100m
        limits:
          memory: 512Mi
      logging:
        type: inline
        loggers:
          rootLogger.level: "DEBUG, ERROR, WARN"
    userOperator:
      secretPrefix: kafka-user-
      resources:
        requests:
          memory: 100Mi
          cpu: 100m
        limits:
          memory: 512Mi
      logging:
        type: inline
        loggers:
          rootLogger.level: "DEBUG, ERROR, WARN"
  kafkaExporter:
    topicRegex: ".*"
    groupRegex: ".*"
    resources:
      requests:
        memory: 100Mi
        cpu: 50m
      limits:
        memory: 512Mi
    logging: "DEBUG, ERROR, WARN"
  cruiseControl:
    resources:
      requests:
        cpu: 100m
        memory: 100Mi
      limits:
        memory: 800Mi
    logging:
      type: inline
      loggers:
        rootLogger.level: "DEBUG, ERROR, WARN"
    metricsConfig:
      type: jmxPrometheusExporter
      valueFrom:
        configMapKeyRef:
          name: cruise-control-metrics
          key: metrics-config.yml
